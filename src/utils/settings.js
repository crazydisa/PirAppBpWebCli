import store from '@/store'
import applib from '@/utils/appLib.js';
import applib2 from "@/utils/appLib2.js";

var participations = {
  CONTAINERNAME: "CONTAINERParticipation",
  MYSTYLE: { }, 
  selectedTab: "Результаты",
  requestOptions1:{typeName: "Participation", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPParticipation",
              title: "Результаты", 
              label:"Результаты",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridParticipation",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Результаты в турнире",
                  requestOptions: "{binding componentName=CONTAINERParticipation, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "multiple",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "EventId", dataType: "list", allowEditing: true, 
                      name: "EventId", label: "Турнир", field: "EventId",},
                    {dataField: "PlayerId", dataType: "list", allowEditing: true,
                     name: "PlayerId", label: "Игрок",  field: "PlayerId",},     
                    {dataField: "TeamId", dataType: "list", allowEditing: true,
                      name: "TeamId",  label: "Команда", field: "TeamId",},     
                    {dataField: "BowlingId", dataType: "list", allowEditing: true,
                      name: "BowlingId", label: "Боулинг", field: "BowlingId",},  
                    {dataField: "Game1", dataType: "number", allowEditing: true,
                      name: "Game1", label: "1 Игра", field: "Game1",},
                    {dataField: "Game2", dataType: "number", allowEditing: true,
                      name: "Game2", label: "2 Игра", field: "Game2",},  

                    {dataField: "Game3", dataType: "number", allowEditing: true,
                      name: "Game3", label: "3 Игра", field: "Game3",},
                    {dataField: "Game4", dataType: "number", allowEditing: true,
                      name: "Game4", label: "4 Игра", field: "Game4",},  

                    {dataField: "Game5", dataType: "number", allowEditing: true,
                      name: "Game5", label: "5 Игра", field: "Game5",},
                    {dataField: "Game6", dataType: "number", allowEditing: true,
                      name: "Game6", label: "6 Игра", field: "Game6",},  


                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Participation}",
                  objectTypeName: "Participation",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: ""},
              ]
  }]
}
var events = {
  CONTAINERNAME: "CONTAINEREvent",
  MYSTYLE: { }, 
  selectedTab: "Турниры",
  requestOptions1:{typeName: "Event", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPEvent",
              title: "Турниры", 
              label:"Турниры",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridEvent",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Список турниров",
                  requestOptions: "{binding componentName=CONTAINEREvent, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                      {dataField: "EventType", dataType: "string", allowEditing: true,
                      name: "EventType", label: "Тип", field: "EventType",},     
                      {dataField: "EventDate", dataType: "date", allowEditing: true,
                        name: "EventDate", label: "Дата начала", field: "EventDate",align: "left"},     
                      {dataField: "OilId", dataType: "list", allowEditing: true,
                        name: "OilId", label: "Программа масла", field: "OilId",},   
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Event}",
                  objectTypeName: "Event",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadParticipationByEventId,
                  filter: null},
              ]
  }]
}

var bowlings = {
  CONTAINERNAME: "CONTAINERBowling",
  MYSTYLE: { }, 
  selectedTab: "Боулинги",
  requestOptions1:{typeName: "Bowling", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPBowling",
              title: "Боулинги", 
              label:"Боулинги",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridBowling",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Список боулингов",
                  requestOptions: "{binding componentName=CONTAINERBowling, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                     
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Bowling}",
                  objectTypeName: "Bowling",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadEventByBowlingId,},
                  
              ]
  }]
}
var oils = {
  CONTAINERNAME: "CONTAINEROil",
  MYSTYLE: { }, 
  selectedTab: "Программа масла",
  requestOptions1:{typeName: "Oil", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPOil",
              title: "Программа масла", 
              label:"Программа масла",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridOil",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Программа масла",
                  requestOptions: "{binding componentName=CONTAINEROil, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                     
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Oil}",
                  objectTypeName: "Oil",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadEventByOilId,
                },
                  
              ]
  }]
}
var cities = {
  CONTAINERNAME: "CONTAINERCity",
  MYSTYLE: { }, 
  selectedTab: "Города",
  requestOptions1:{typeName: "City", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPCity",
              title: "Города", 
              label:"Города",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridCity",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Города",
                  requestOptions: "{binding componentName=CONTAINERCity, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Город", field: "Name",},
                     
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=City}",
                  objectTypeName: "City",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadPlayerByCityId,
                },
                  
              ]
  }]
}

var ranks = {
  CONTAINERNAME: "CONTAINERRank",
  MYSTYLE: { }, 
  selectedTab: "Разряды",
  requestOptions1:{typeName: "Rank", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPRank",
              title: "Разряды", 
              label:"Разряды",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridRank",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Разряды",
                  requestOptions: "{binding componentName=CONTAINERRank, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Разряд", field: "Name",},
                     
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Rank}",
                  objectTypeName: "Rank",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadPlayerByRankId,
                },
                  
              ]
  }]
}

var teams = {
  CONTAINERNAME: "CONTAINERTeam",
  MYSTYLE: { }, 
  selectedTab: "Команды",
  requestOptions1:{typeName: "Team", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPTeam",
              title: "Команды", 
              label:"Команды",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridTeam",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Команды",
                  requestOptions: "{binding componentName=CONTAINERTeam, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                     
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Team}",
                  objectTypeName: "Team",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadTeamMemberByTeamId,
                },
                  
              ]
  }]
}

var teamMembers = {
  CONTAINERNAME: "CONTAINERTeamMember",
  MYSTYLE: { }, 
  selectedTab: "Члены команды",
  requestOptions1:{typeName: "TeamMember", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPTeamMember",
              title: "Члены команды", 
              label:"Члены команды",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridTeamMember",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Члены команды",
                  requestOptions: "{binding componentName=CONTAINERTeamMember, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "multiple",
                  autoLoad: false,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                    {dataField: "PlayerId", dataType: "list", allowEditing: true,
                     name: "PlayerId", label: "Игрок",  field: "PlayerId",},     
                    {dataField: "TeamId", dataType: "list", allowEditing: true,
                      name: "TeamId",  label: "Команда", field: "TeamId",},     
                    {dataField: "CityId", dataType: "list", allowEditing: true,
                      name: "CityId", label: "Город", field: "CityId",},  
                    {dataField: "RankId", dataType: "list", allowEditing: true,
                      name: "RankId", label: "Разряд", field: "RankId",},  
                    {dataField: "StartDate", dataType: "date", allowEditing: true,
                      name: "StartDate", label: "Начало", field: "StartDate",align: "left",
                      },

                      {dataField: "EndDate", dataType: "date", allowEditing: true,
                      name: "EndDate", label: "Конец", field: "EndDate",align: "left",
                      },
                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=TeamMember}",
                  objectTypeName: "TeamMember",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: ""},
              ]
  }]
}

var players = {
  CONTAINERNAME: "CONTAINERPlayer",
  MYSTYLE: { }, 
  selectedTab: "Игроки",
  requestOptions1:{typeName: "Player", nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPPlayer",
              title: "Игроки", 
              label:"Игроки",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QObjectsDataGrid", 
                  NAME: "QObjectsDataGridPlayer",
                  autoGetDataSource: true,
                  dataSource: [],
                  importDataSource: [],
                  keyExpr: "Id",
                  title: "Игроки",
                  requestOptions: "{binding componentName=CONTAINERPlayer, path=requestOptions1}",
  
                  disableButtons: {addRow: false,save: false,removeRow: false},
                  selected: [],
                    addedRows:[],
                    deletedRows:[],
                    changedRows:[],
                  selection: "single",
                  autoLoad: true,
                  autoColumns: false,
                  columns: [
                    {dataField: "Name", dataType: "string", allowEditing: true, 
                      name: "Name", label: "Name", field: "Name",},
                    {dataField: "CityId", dataType: "list", allowEditing: true,
                      name: "CityId", label: "Город", field: "CityId",},  
                    {dataField: "RankId", dataType: "list", allowEditing: true,
                      name: "RankId", label: "Разряд", field: "RankId",},  
                    {dataField: "BirthDate", dataType: "date", allowEditing: true,
                      name: "BirthDate", label: "Дата рождения", field: "BirthDate",align: "left",
                      },

                  ],
                  objectType: "{setvalue getterName=getObjectTypes, path=Player}",
                  objectTypeName: "Player",
                  docPartsObjectType: null,
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",
                  getterName: null,
                  modifiedObjects: [],
                  selectedTabInMyGroup: null,
                  selectedCellType: "",
                  selectedCellData:"",
                  getterParam: "",
                  getter: undefined,
                  actionName: null,
                  actionParam: "", 
                  selectedCell: null,
                  selectedObject: null,
                  selectedObjectDataType: null,
                  selectedValue: "",
                  selectedObjectType: null,
                  thisInstance: null,
                  instance: null,
                  text: "",
                  handlerqDataGridSelection: applib2.LoadTeamByPlayerId,
                },
              ]
  }]
}
var uploads = {
  CONTAINERNAME: "CONTAINERBowling",
  MYSTYLE: { }, 
  selectedTab: "Загрузка данных",
  requestOptions1:{typeName: "", nameSpace: "GamesResults.Models", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPBowling",
              title: "Загрузка данных", 
              label:"Загрузка данных",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "UploadForm", 
                  NAME: "UploadFormData",
                 },
                  
              ]
  }]
}
var navigation1 = {
  CONTAINERNAME: "CONTAINERnavigation1",
  MYSTYLE: { }, 
  selectedTab: "Турниры и результаты",
  requestOptions1:{typeName: null, nameSpace: "GamesResults.Models.Bowling", 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/universal/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  //handlerSelectedTab1: applib.LoadDepOrders,

  //handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "GROUPBowling",
              title: "Турниры и результаты", 
              label:"Турниры и результаты",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                {component: "QDynamicComponent", 
                  //tabs: null,
                  NAME: "navigation1DynamicComponent",
                  ['is-dynamic']: false,
                  MYSTYLE: {backgroundColor: "white",}, 
                  },  
              ]
  }]
}


//import { readonly } from 'vue';
//import { ref} from 'vue';
//import graphr from "@/utils/graph.js";
//import {mapGetters} from "vuex";
//let graph ={...mapGetters([
//  "getGraph",
//  "getValue",
//  "getSetting",
//              if(Object.prototype.toString.call(selectedObject) === '[object Object]') {
//])}
//Трудозатраты
var laborCostContent = {
  CONTAINERNAME: "laborCostContent",
  MYSTYLE: { }, 
  selectedTab: "Дерево проектов",
  requestOptions1:{typeName: null, nameSpace: null, 
    actionName: "loadAnyObjects", getterName: "getAnyObjects", setterName:"setAnyObjects",
    url:"/sapsan/anyObjects", accesName: "GetAnyObjects",
    condition: null, useFilterIds: false, idPropName: "Id", ids:[]},
  handlerSelectedTab1: applib.LoadDepOrders,

  handlerSelectedTab3: applib.loadCalendar,
  dataSource: [{
              GROUPNAME: "autoTZInput",
              title: "Автоматическое распределение трудозатрат", 
              label:"Автоматическое распределение трудозатрат",
              static: true,
              MYSTYLE: {},
              COMPONENTS: [ 
                
                {component: "QInput",
                  NAME: "objectShifr",
                  label: "Шифр объекта",
                  readonly: true,
                  hideHint: false,
                  hint: "<- Укажите проект",
                  text: "{binding componentName=mainTreeView, path=selectedObject.ContractShifr}",
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block", float: "left"},
                  
                },{component: "QInput", 
                  NAME: "gip",
                  label: "Гип",
                  readonly: true,
                  hideHint: true,
                  hint: "Заполняется автоматически по клику на выбранном проекте",
                  text: "{binding componentName=mainTreeView, path=selectedObject.ContractGip}",
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block", float: "left"},
                },{component: "QInput", 
                  NAME: "objectName",
                  label: "Наименование объекта",
                  readonly: true,
                  hideHint: true,
                  hint: "Заполняется автоматически по клику на выбранном проекте",
                  text: "{binding componentName=mainTreeView, path=selectedObject.ContractName}",
                  MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                },{component: "QInput", 
                  NAME: "contactShifr",
                  text: "",
                  selectedObject: null,
                  label: "Шифр договора",
                  MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                },{component: "QInput", 
                  NAME: "stageKP",
                  text: "",
                  selectedObject: null,
                  label: "Номер этапа по КП",
                  MYSTYLE: {backgroundColor: "white", display: "flex"},
                },{component: "QInput", 
                  NAME: "typeOfWork",
                  selectedObject: null,
                  text: "",
                  label: "Вид работ",
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block", float: "left"},
                },{component: "QDatePiker", 
                  NAME: "beginDate",
                  label: "Начало периода",
                  readonly: true,
                  useErrorFunc: true,
                  //getDate: 
                  selected: new Date(),
                  errorFunc: applib.beginDateRule,
                  MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                  //selectedObject: applib.GetCurrentDateWithautTime(),
                  handlerqDataPikerChanged1: applib.updateAddedDataSet,
                },{component: "QDatePiker", 
                  NAME: "endDate",
                  label: "Конец периода",
                  useErrorFunc: true,
                  errorFunc: applib.endDateRule,
                  readonly: true,
                  selected: new Date(),
                  //selectedObject: applib.GetCurrentDateWithautTime(),
                  MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                  handlerqDataPikerChanged1: applib.updateAddedDataSet,
                },
                // {component: "QInput",
                //   NAME: "totalHours",
                //   label: "Кол-во общих т/з*",
                //   type: "number",
                //   MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                // },
                // {component: "QInput",
                //   NAME: "labelRemHours",
                //   label: "Остаток часов",
                //   type: "number",
                //   MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                // },
               {component: "QInput",
                  NAME: "TextBoxDesired",
                  label: "Желаемое кол-во ч. в день",
                  type: "number",
                  text: 1,
                  useErrorFunc: true,
                  errorFunc: val => val<1 || val>8,
                  selectedObject: 1,
                  MYSTYLE: {backgroundColor: "white",  display: "flex",},
                  handlerqImputChanged1: applib.addDesiredHoursToListBox1,
                  
                },{component: "QSelectBox",
                NAME: "comboBoxDepartment",
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                label: "Отдел",
                dataFilter: function(n) {

                  const typeName = "SprDepOrder"
                  const nameSpace = "PirAppBp.Models.Sapsan"
                  const fullTypeName = nameSpace+"."+typeName
                  let usedDep = store.getters["getAnyObjects"][fullTypeName]
                  let isExist = usedDep.find(o => o.SprSubdivisionId == n.Id)
                  if (isExist){
                   return true
                  }
                  else
                    return false},
                selectedObject: null,
                selectedObjectDataType: null,
                objectType: "{setvalue getterName=getObjectTypes, path=SprSubdivision}",
                MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                handlerSelectBoxObjectSelected1: applib.loadUserBySubdivision,
                },{component: "QInput",
                  NAME: "TZDep",
                  label: "т/з на отдел*",
                  selectedObject: null,
                  type: "number",
                  text: 0,
                  selectedObjectDataType: null,
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block", float: "left"},
                  handlerqImputChanged1: applib.recalculateAssigned,
                },{component: "QInput",
                  NAME: "labelRemHours",
                  label: "Осталось",
                  selectedObject: null,
                  selectedObjectDataType: null,
                  hint: "Disable",
                  type: "number",
                  text: 0,
                  disable: true,
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block", float: "left"},
                  handlerqImputChanged1: applib.recalculateAssigned,
                },{component: "QInput",
                  NAME: "maxHoursFromPeriod",
                  label: "Максимально возможное число часов",
                  text: "",
                  type: "number",
                  selectedObject: null,
                  selectedObjectDataType: null,
                  hint: "Disable",
                  disable: true,
                  MYSTYLE: {backgroundColor: "white",  display: "inline-block"},
                  //handlerqImputChanged1: applib.recalculateAssigned,
                },{component: "QButton", 
                NAME: "createTabel",
                label: "Создать табель",
                disableTooltipText: "Добавьте сотрудников в набор!",
                tooltipText: "Распределить часы по набору сотрудников",
                disable: "{binding componentName=ListBox2, path=isEmpty}",
                MYSTYLE: {backgroundColor: "white", display: "flex",},
                handlerqButtonClick1: () => { applib.CommandButtons("createTabel")},
              },{component: "QDataGrid", 
                  NAME: "ListBox1",
                  autoGetDataSource: true,
                  autoLoad: true,
                  selection: "multiple",
                  keyExpr: "Id",
                  
                  title: "Список сотрудников в отделе",
                  requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                  selected: [],
                  addedRows:[],
                  deletedRows:[],
                  changedRows:[],
                  disableButtons: {addRow: true,save: true,removeRow: true},
                  customButtonProgress: { loading: false, percentage: 0 },
                  customButtons:[{name:"addSet", lable: "Добавить в табель", enable: true, disable: () =>false, 
                                  progress: { loading: false, percentage: 0 },
                                  buttonClick: () => { applib.CommandButtons.bind(applib)("addDataSet")}}],
                  autoColumns: false,
                  columns: [{dataField: "Surname", dataType: "string", allowEditing: false, 
                              name: "Surname", label: "ФИО", field: "Surname", align: "left", readonly: true},
                            {dataField: "Position", dataType: "string", allowEditing: false, 
                              name: "Position", label: "Должность", field: "Position", align: "left", readonly: true},
                            {dataField: "assigned", dataType: "number", allowEditing: true,
                              name: "assigned", label: "Назначено", field: "assigned",align: "left",
                              rule: applib.ruleAsPositiveNumberIfSelected},
                           
                            {dataField: "department", dataType: "string", allowEditing: false,
                              name: "department", label: "Отдел", field: "department",align: "left", readonly: true},
                              // {dataField: "OrderNum", dataType: "number", allowEditing: true,
                              //   name: "OrderNum", label: "Порядок", field: "OrderNum", align: "left",
                              //   rule: applib.ruleAsPositiveNumber},
                            {dataField: "remains", dataType: "number", allowEditing: false,
                              name: "remains", label: "Остаток", field: "remains", align: "left", readonly: true},
                            
                            {dataField: "hoursPerDay", dataType: "number", allowEditing: true,
                              name: "hoursPerDay", label: "Часов в день", field: "hoursPerDay",align: "left",
                              rule: applib.ruleAsPositiveNumberWithRangeIfSelected},
                            
                  ],
                  dataSource: [],
                  selectedData:[],
                  dataSets:[],
                  objectType: "{setvalue getterName=getObjectTypes, path=User}",
                  objectTypeName: "User", 
                  height: "40vh",
                  width: "100%",
                  ['editing-mode']: "popup",                 
                  selectedCellType: "",
                  selectedCellData:"",
                  selectedObject: null,
                  selectedObjectDataType: null,  
                  handler: applib.loadUserBySubdivision,
                  handlerqDataGridSelection1: applib.ListBox1Selection1,
                  //handlerAddSets: applib.addDataSet,
                  //handlerqDataGridCustomButton1: applib.addDataSet,

                },{component: "QDataGrid", 
                NAME: "ListBox2",
                workingDays:[],
                employeesData: [],
                colPeriodForAllDep: [],
                autoGetDataSource: true,
                autoLoad: true,
                title: "Набор сотрудников для автоматического формирования табеля",
                selection: "multiple",
                keyExpr: "Id",
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                selected: [],
                addedRows:[],
                deletedRows:[],
                changedRows:[],
                disableButtons: {addRow: true,save: true,removeRow: false},
                customButtonProgress: { loading: false, percentage: 0 },
                customButtons:[{name:"recalc", lable: "Пересчитать остатки часов", enable: true,  disable: () =>false,
                                progress: { loading: false, percentage: 0 },
                                buttonClick: applib.updateAddedDataSet.bind(applib)}],
                isEmpty: () =>true,
                autoColumns: false,
                columns: [{dataField: "Surname", dataType: "string", allowEditing: false, 
                            name: "Surname", label: "ФИО", field: "Surname",align: "left",style: 'width: 300px', readonly: true},
                          {dataField: "assigned", dataType: "number", allowEditing: true,
                            name: "assigned", label: "Назначено", field: "assigned",align: "left",
                            rule: applib.assignedRule},
                          {dataField: "OrderNum", dataType: "number", allowEditing: true,
                            name: "OrderNum", label: "Порядок", field: "OrderNum",align: "left",
                            rule: applib.ruleAsPositiveNumber},
                          {dataField: "department", dataType: "string", allowEditing: false,
                            name: "department", label: "Отдел", field: "department",align: "left", readonly: true},
                          
                          {dataField: "remains", dataType: "number", allowEditing: false,
                            name: "remains", label: "Остаток", field: "remains",align: "left", readonly: true},
                          
                          {dataField: "hoursPerDay", dataType: "number", allowEditing: true,
                            name: "hoursPerDay", label: "Часов в день", field: "hoursPerDay",align: "left",
                            rule: applib.ruleAsPositiveNumberWithRange},
                            
                          {dataField: "startPeriod", dataType: "date", allowEditing: true,
                          name: "startPeriod", label: "Начало", field: "startPeriod",align: "left",
                          rule: applib.dateRule},

                          {dataField: "endPeriod", dataType: "date", allowEditing: true,
                          name: "endPeriod", label: "Конец", field: "endPeriod",align: "left",
                          rule: applib.dateRule},
                          
                ],
                dataSource: "{binding componentName=ListBox1, path=dataSets}",
                selectedData:[],
                dataSets:[],
                objectType: "{setvalue getterName=getObjectTypes, path=User}",
                objectTypeName: "User", 
                height: "40vh",
                width: "100%",
                ['editing-mode']: "popup",                 
                selectedCellType: "",
                selectedCellData:"",
                selectedObject: null,
                selectedObjectDataType: null,  
                //handlerqDataGridCustomButton1: applib.updateAddedDataSet,
              },
              ]
  },{
    GROUPNAME: "cardClock",
    title: "Табель рабочего времени",
    label: "Табель рабочего времени",
    static: false,
    
    MYSTYLE: {backgroundColor: "white"}, 
    handlerSelectedTab1: applib.LoadUsers,
    //popupVisible: false,
    COMPONENTS: [{component: "QButton", 
      NAME: "showcardClock",
      label: "Показать",
      tooltipText: "Визуально оценить распределение часов в табеле",
      disableTooltipText: "Выберете табель!",
      disable: () => {return applib.disableButtons("showcardClock")},
      MYSTYLE: { display: "inline-block", float: "left"},
      handlerqButtonClick1: () => { applib.CommandButtons("showcardClock")},
    },{component: "QButton", 
      NAME: "cancelTabel",
      label: "Отменить создание табеля",
      disable: () => {return applib.disableButtons("cancelTabel")},
      disableTooltipText: "Кнопка активна когда выбран не сохраненный в базу табель",
      tooltipText: "Не сохранять сгенерированный табель. В таблице снова будут отображаться табели сохраненные в базе",
      MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
      handlerqButtonClick1: () => { applib.CommandButtons("cancelTabel")},
    },{component: "QButton", 
      NAME: "addRecordButton",
      progress:{ loading: false, percentage: 0 },
      label: "Сохранить изменения в базу",
      disableTooltipText: "Выберете табель!",
      disable: () => {return applib.disableButtons("addRecordButton")},
      tooltipText: "Сохранить в базу табель с входящим в него списком сотрудников и назначенных часов",
      MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
      handlerqButtonClick1: () => { applib.CommandButtons("addRecordButton")},
    },{
  component: "QButton", 
    NAME: "getReport",
    label: "Скачать отчет в Excel",
    tooltipText: "Создается отчет в exel на основе выбранного табеля",
    disableTooltipText: "Выберете табель!",
    disable: () => {return applib.disableButtons("getReport")},
    MYSTYLE: {display: "flex",},
    handlerqButtonClick1: applib.getReport,
    },{
              component: "QDataGrid", 
                NAME: "cardClockComp",
                separator:"cell",
                title: "Назначенные часы сотрудникам",
                myclass: "my-sticky-column-table",
                disableButtons: {addRow: true,save: true,removeRow: true},
                customButtonProgress: { loading: false, percentage: 0 },
                customButtons:[{name:"change", lable: "Редактировать", enable: true, disable: applib.disableButtons,
                              progress: { loading: false, percentage: 0 },
                              buttonClick: applib.CommandButtons.bind(applib)}],
                autoGetDataSource: true,
                dataSource: [],
                shownTabelId: null,
                cardClockIds: null,
                useNumberCellsHint: false,
                useStringCellsHint: false,
                noErrorIcon: true,
                use3Dheader: true,
                keyExpr: "Id",
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                selected: [],
                addedRows:[],
                deletedRows:[],
                changedRows:[],
                selection: "none",
                autoLoad: true,
                autoColumns: false,
                columns: [],
                objectType: "{setvalue getterName=getObjectTypes, path=CardClock}",
                objectTypeName: "CardClock",
                docPartsObjectType: null,
                height: "40vh",
                width: "100%",
                ['editing-mode']: "popup",
                getterName: null,
                modifiedObjects: [],
                selectedTabInMyGroup: null,
                selectedCellType: "",
                selectedCellData:"",
                getterParam: "",
                getter: undefined,
                actionName: null,
                actionParam: "", 
                selectedCell: null,
                selectedObject: null,
                selectedObjectDataType: null,
                selectedValue: "",
                selectedObjectType: null,
                thisInstance: null,
                text: "",
                //handlerqDataGridCustomButton1: applib.CommandButtons,
              },
            {component: "QObjectsDataGrid", 
                NAME: "tabelObjectComp",
                autoGetDataSource: true,
                dataSource: [],
                importDataSource: [],
                keyExpr: "Id",
                title: "Сформированные табели",
                disableButtons: {addRow: true,save: true,removeRow: false},
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                selected: [],
                  addedRows:[],
                  deletedRows:[],
                  changedRows:[],
                isRowNotSelected: () => true,
                selection: "single",
                autoLoad: true,
                sortBy: "ModifiedAt",
                autoColumns: false,
                columns: [
                  {dataField: "ContractId", dataType: "list", allowEditing: true, 
                    name: "ContractId", label: "Проект", field: "ContractId",align: "left"},
                    {dataField: "Title", dataType: "string", allowEditing: true,
                    name: "Title", label: "Имя файла", field: "Title",align: "left"}, 
                    {dataField: "GipId", dataType: "list", allowEditing: true, 
                    name: "GipId", label: "Гип", field: "GipId",align: "left"},
                    {dataField: "StageNumber", dataType: "string", allowEditing: true,
                           name: "StageNumber", label: "Номер этапа по КП", field: "StageNumber",align: "left"},  
                    {dataField: "TypeWork", dataType: "string", allowEditing: true,
                    name: "TypeWork", label: "Вид работы", field: "TypeWork",align: "left"},
                    {dataField: "ShifrAgr", dataType: "string", allowEditing: true,
                      name: "ShifrAgr", label: "Шифр договора", field: "ShifrAgr",align: "left"},    
                    {dataField: "startPeriod", dataType: "date", allowEditing: true,
                    name: "startPeriod", label: "Дата", field: "startPeriod",align: "left"},     
                    {dataField: "endPeriod", dataType: "date", allowEditing: true,
                    name: "endPeriod", label: "Дата", field: "endPeriod",align: "left"}, 
                    {dataField: "AuthorId", dataType: "list", allowEditing: true,
                      name: "AuthorId", label: "Автор", field: "AuthorId",align: "left"},
                    {dataField: "ModifiedAt", dataType: "date", allowEditing: true,
                      name: "ModifiedAt", label: "Дата изменения", field: "ModifiedAt",align: "left", sortable: true, },     
                ],
                objectType: "{setvalue getterName=getObjectTypes, path=Tabel}",
                objectTypeName: "Tabel",
                docPartsObjectType: null,
                height: "40vh",
                width: "100%",
                ['editing-mode']: "popup",
                getterName: null,
                modifiedObjects: [],
                selectedTabInMyGroup: null,
                selectedCellType: "",
                selectedCellData:"",
                getterParam: "",
                getter: undefined,
                actionName: null,
                actionParam: "", 
                selectedCell: null,
                selectedObject: null,
                selectedObjectDataType: null,
                selectedValue: "",
                selectedObjectType: null,
                thisInstance: null,
                instance: null,
                text: "",
                handlerqDataGridSelection: applib.LoadCardClockByTabelId,},
            {component: "QObjectsDataGrid", 
                NAME: "cardClockObjectComp",
                autoGetDataSource: true,
                dataSource: [],
                importDataSource: [],
                keyExpr: "Id",
                title: "Часы сотрудников из выбранного табеля",
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",

                disableButtons: {addRow: true,save: true,removeRow: true},
                selected: [],
                  addedRows:[],
                  deletedRows:[],
                  changedRows:[],
                selection: "multiple",
                autoLoad: false,
                autoColumns: false,
                columns: [
                  {dataField: "EmployeeId", dataType: "list", allowEditing: true, 
                    name: "EmployeeId", label: "ФИО", field: "EmployeeId",},
                    {dataField: "Date", dataType: "date", allowEditing: true,
                    name: "Date", label: "Дата", field: "Date",},     
                    {dataField: "TypeOfWork", dataType: "string", allowEditing: true,
                      name: "TypeOfWork", label: "Вид работы", field: "TypeOfWork",align: "left"},     
                    {dataField: "Watch", dataType: "number", allowEditing: true,
                      name: "Watch", label: "Часов", field: "Watch",align: "left"},   
                ],
                objectType: "{setvalue getterName=getObjectTypes, path=CardClock}",
                objectTypeName: "CardClock",
                docPartsObjectType: null,
                height: "40vh",
                width: "100%",
                ['editing-mode']: "popup",
                getterName: null,
                modifiedObjects: [],
                selectedTabInMyGroup: null,
                selectedCellType: "",
                selectedCellData:"",
                getterParam: "",
                getter: undefined,
                actionName: null,
                actionParam: "", 
                selectedCell: null,
                selectedObject: null,
                selectedObjectDataType: null,
                selectedValue: "",
                selectedObjectType: null,
                thisInstance: null,
                instance: null,
                text: ""},
            
            
                    ]
},
  {
    GROUPNAME: "departmentOrders",
    title: "Очередность отделов",
    label: "Очередность отделов",
    static: false,
    MYSTYLE: {backgroundColor: "white"}, 
    //popupVisible: false,
    COMPONENTS: [
                {component: "QObjectsDataGrid", 
                NAME: "ListBox3",
                autoGetDataSource: true,
                dataSource: [],
                importDataSource: [],
                keyExpr: "Id",
                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                selected: [],
                  addedRows:[],
                  deletedRows:[],
                  changedRows:[],
                selection: "multiple",
                autoLoad: true,
                autoColumns: false,
                columns: [
                          {dataField: "SprSubdivisionId", dataType: "list", allowEditing: true, 
                            name: "SprSubdivisionId", label: "Отдел", field: "SprSubdivisionId",align: "left"},
                          {dataField: "OrderNum", dataType: "number", allowEditing: true,
                            name: "OrderNum", label: "Порядок", field: "OrderNum",align: "left"},
                          {dataField: "AuthorId", dataType: "list", allowEditing: true, 
                            name: "AuthorId", label: "Автор", field: "AuthorId",align: "left"},
                         
                          
                          
                ],
                objectType: "{setvalue getterName=getObjectTypes, path=SprDepOrder}",
                objectTypeName: "SprDepOrder",
                docPartsObjectType: null,
                height: "40vh",
                width: "100%",
                ['editing-mode']: "popup",
                getterName: null,
                modifiedObjects: [],
                selectedTabInMyGroup: null,
                selectedCellType: "",
                selectedCellData:"",
                getterParam: "",
                getter: undefined,
                actionName: null,
                actionParam: "", 
                selectedCell: null,
                selectedObject: null,
                selectedObjectDataType: null,
                selectedValue: "",
                selectedObjectType: null,
                thisInstance: null,
                text: ""},
                    ]
}, {
  GROUPNAME: "CalendarNonWorkingDays",
  title: "Календарь нерабочих дней",
  label: "Календарь нерабочих дней",
  static: false,
  MYSTYLE: {backgroundColor: "white"}, 
  //popupVisible: false,
  COMPONENTS: [
              {component: "QObjectsDataGrid", 
              NAME: "calendarWeekends",
              autoGetDataSource: true,
              dataSource: [],
              importDataSource: [],
              instance: null,
              keyExpr: "Id",
              requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
              selected: [],
              addedRows:[],
              deletedRows:[],
              changedRows:[],
              selection: "multiple",
              autoLoad: true,
              autoColumns: false,
              columns: [
                        {dataField: "Year", dataType: "number", allowEditing: true, 
                          name: "Year", label: "Год", field: "Year",align: "left"},
                        {dataField: "Month", dataType: "number", allowEditing: true,
                          name: "Month", label: "Месяц", field: "Month",align: "left"},
                        {dataField: "Days", dataType: "string", allowEditing: true, 
                          name: "Days", label: "Нерабочие дни", field: "Days",align: "left"},
                       
                        
                        
              ],
              objectType: "{setvalue getterName=getObjectTypes, path=HolidayOrWeekend}",
              objectTypeName: "HolidayOrWeekend",
              docPartsObjectType: null,
              height: "40vh",
              width: "100%",
              ['editing-mode']: "popup",
              getterName: null,
              modifiedObjects: [],
              selectedTabInMyGroup: null,
              selectedCellType: "",
              selectedCellData:"",
              getterParam: "",
              getter: undefined,
              actionName: null,
              actionParam: "", 
              selectedCell: null,
              selectedObject: null,
              selectedObjectDataType: null,
              selectedValue: "",
              selectedObjectType: null,
              thisInstance: null,
              text: "",
              //handlerqDataGridCustomButton: applib.loadDefaultCalendar,
              
}]
},{
  GROUPNAME: "debugPage",
  title: "Очистка от неиспользуемых данных",
  label: "Очистка от неиспользуемых данных",
  static: false,
  MYSTYLE: {backgroundColor: "white"}, 
  //popupVisible: false,
  COMPONENTS: [{
            component: "QButton", 
              NAME: "getErrorRecords",
              label: "Найти записи",
              tooltipText: "Поиск ошибочно внесенных записей",
              disableTooltipText: "",
              disable: () => false,
              MYSTYLE: {display: "flex",},
              handlerqButtonClick1: applib.getErrorRecords,
               },
               //{
            // component: "QButton", 
            //   NAME: "selectAllError",
            //   label: "Выделить все записи",
            //   tooltipText: "",
            //   disableTooltipText: "",
            //   disable: () => false,
            //   MYSTYLE: {display: "flex",},
            //   //handlerqButtonClick1: applib.selectAllError,
            //   },
              {component: "QObjectsDataGrid", 
              NAME: "cardClocksWithoutTabel",
              autoGetDataSource: true,
              dataSource: [],
              importDataSource: [],
              keyExpr: "Id",
              title: "Записи без Табеля",
              requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
              disableButtons: {addRow: true,save: false,removeRow: false},
              selected: [],
              addedRows:[],
              deletedRows:[],
              changedRows:[],
              selection: "multiple",
              autoLoad: false,
              autoColumns: false,
              columns: [
                {dataField: "EmployeeId", dataType: "list", allowEditing: true, 
                  name: "EmployeeId", label: "ФИО", field: "EmployeeId",align: "left"},
                {dataField: "Date", dataType: "date", allowEditing: true,
                  name: "Date", label: "Дата", field: "Date",align: "left"},     
                {dataField: "TypeOfWork", dataType: "string", allowEditing: true,
                    name: "TypeOfWork", label: "Вид работы", field: "TypeOfWork",align: "left"},     
                {dataField: "Watch", dataType: "number", allowEditing: true,
                    name: "Watch", label: "Часов", field: "Watch",align: "left"}, 
                {dataField: "DeletedAt", dataType: "date", allowEditing: true,
                    name: "DeletedAt", label: "Удалено", field: "DeletedAt",align: "left"},    
              ],
              objectType: "{setvalue getterName=getObjectTypes, path=CardClock}",
              objectTypeName: "CardClock",
              docPartsObjectType: null,
              height: "40vh",
              width: "100%",
              ['editing-mode']: "popup",
              getterName: null,
              modifiedObjects: [],
              selectedTabInMyGroup: null,
              selectedCellType: "",
              selectedCellData:"",
              getterParam: "",
              getter: undefined,
              actionName: null,
              actionParam: "", 
              selectedCell: null,
              selectedObject: null,
              selectedObjectDataType: null,
              selectedValue: "",
              selectedObjectType: null,
              thisInstance: null,
              instance: null,
              text: ""},
                  ]
},{
  GROUPNAME: "uploadFiles",
  title: "Загрузка файлов",
  label: "Загрузка файлов",
  static: true,
  MYSTYLE: {backgroundColor: "white"}, 
  COMPONENTS: [
    // {component: "ButtonDx", 
    //             buttonclick: "on-load-objects",
    //             text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
    //             NAME: "",
    //             //emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},
    {component: "QInputSlot", 
      NAME: "uploadInfo",
      selectedObject: null,
      dense: true,
      borderless: true,
      autogrow: true,
      readonly: true,
      style: "max-width: 1200px; min-width: 1200px; font-size: 14",
      label: "Загрузка данных из Excel. \n Формат файла excel должен соответствовать шаблону.\n Можно загружать сразу список файлов, обработка при загрузке идет параллельная. ",
      MYSTYLE: {backgroundColor: "white", display: "flex"},
    },{component: "QImage", 
      NAME: "excelTemplate",
      
      style: "max-width: 1200px; min-width: 1200px; font-size: 14",
      
      MYSTYLE: {backgroundColor: "white", display: "flex"},
    },
    
    
    {component: "QUploader", 
              NAME: "uploadGrid",
              
              //handler: applib.loadLetterProtocolsByContract,
            },
  ]
},]
}

//popup для DataGrid-----------------
var dataGridPopupContent = 
{
  MYSTYLE: {backgroundColor: "white"}, 
  container: "DxTabPanel",
  CONTAINERNAME: "dataGridPopup",
  dataSource: [{
    GROUPNAME: "dataGridPopupContent",
    title: "Табличные данные",
    label: "Табличные данные",
    static: false,
    MYSTYLE: {backgroundColor: "white"}, 
    //popupVisible: false,
    COMPONENTS: [
                {component: "ButtonDx", 
                            buttonclick: "on-load-objects",
                            text: "{binding componentName=PARENT, path=selectedCellType.Name}", 
                            NAME: "dDxButton",
                            emitParam1: "{binding componentName=PARENT, path=selectedCellType}"},
                {component: "ButtonDx", 
                            buttonclick: "on-select-objects",
                            text: "Выбрать", 
                            NAME: "dDxButton1",
                            emitParam1: "{binding componentName=PARENT, path=selectedCell}",
                            emitParam2: "{binding componentName=dObjectsDataGrid, path=selectedObject}"},
                {component: "ButtonDx", 
                            buttonclick: "on-db-update",
                            text: "Save", 
                            NAME: "dDxButton2",
                            //emitParam1: "{binding componentName=PARENT, path=selectedCell}",
                            emitParam3: "{binding componentName=dObjectsDataGrid, path=modifiedObjects}"},                           
                  
                {component: "ObjectsDataGrid", 
                            NAME: "dObjectsDataGrid",
                            buttonClick: "on-load-objects",
                            height: "650",
                            //width: 1300,
                            acceptedType: Object,
                            editingMode: "popup",
                            showEditorByRowClick: true,
                            requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                            autoGetDataSource: true,
                            selectedCellType: "",
                            selectedCellData: "",
                            modifiedObjects: [],
                            dataSource: null,//"{binding componentName=PARENT, path=selectedCellData}",
                            objectType: "{binding componentName=PARENT, path=selectedCellType}",
                            getterName: null,
                            getterParam: "",
                            getter: undefined,
                            actionName: null,
                            actionParam: "", 
                            selectedObject: null,
                            selectedCell: null,
                            selectedValue: "",
                            selectedObjectType: null,
                            selectedObjectDataType: null,
                            popupContent: "{binding componentGroupName=dataGridPopupContent}",
                            text: ""},
                    ]
}]}//__________________________________
//popup для TreeView--------------
var treeViewPopupContent={
  container: "DxTabPanel",
  MYSTYLE: {backgroundColor: "white"}, 
  CONTAINERNAME: "treeViewPopup",
  dataSource: [{
                GROUPNAME: "treeViewPopupContent",
                title: "Табличные данные",
                label: "Табличные данные",
                static: true,
                MYSTYLE: {backgroundColor: "white"}, 
                COMPONENTS: [
                      {component: "ButtonDx", 
                                  buttonclick: "on-load-objects",
                                  text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                                  NAME: "mainDGButtonLoad",
                                  emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
                      {component: "ButtonDx", 
                                  buttonclick: "on-select-objects",
                                  text: "Выбрать", 
                                  NAME: "dDxButton1",
                                  emitParam1: "{binding componentName=mainObjectsDataGrid3, path=selectedCell}",
                                  emitParam2: "{binding componentName=mainObjectsDataGrid3, path=selectedObject}"},           
                      {component: "ButtonDx", 
                                  buttonclick: "on-db-update",
                                  text: "Save", 
                                  NAME: "dDxButton2",
                                  //emitParam1: "{binding componentName=PARENT, path=selectedCell}",
                                  emitParam3: "{binding componentName=mainObjectsDataGrid3, path=modifiedObjects}"},                           
                        
                      {component: "ObjectsDataGrid", 
                                  NAME: "mainObjectsDataGrid3",
                                  height: "650",
                                  //width: 1500,
                                  buttonClick: "on-load-objects",
                                  acceptedType: Object,
                                  autoGetDataSource: false,
                                  selectedCellType: "yyy",
                                  selectedCellData:"",
                                  editingMode: "popup",
                                  modifiedObjects: [],
                                  dataSource: "{binding componentName=mainTreeView, path=selectedObject}",
                                  objectType: "{binding componentName=mainTreeView, path=selectedObjectDataType}",
                                  getterName: null,
                                  getterParam: "",
                                  getter: undefined,
                                  actionName: null,
                                  actionParam: "", 
                                  selectedObject: null,
                                  selectedCell: null,
                                  selectedValue: "{binding componentName=mainTreeView, path=selectedObject}",
                                  selectedObjectType: null,
                                  selectedObjectDataType: null,
                                  popupContent: "{binding componentGroupName=dataGridPopupContent}",
                                  text: ""},]
}]}//_____________________________
         
//TreeView--------------------          
var treeViewContent={
  MYSTYLE: { width: "20vw", height: "100vh"}, 
  container: "DxTabPanel",
  ['tabs-position']: "top",
  selectedTab: "Турниры",
  //visible: false,
  ['scrolling-enabled']: true,
  ['main-title']: "",
  thisInstance: null,
  CONTAINERNAME: "treeView",
  dataSource: [{ 
              GROUPNAME: "treeViewContent",
              title: "Турниры",
              label:"Турниры",
              MYSTYLE: {backgroundColor: "white"}, 
              static: true,
              COMPONENTS: [ 
          {component: "QTreeView", 
              NAME: "mainTreeView",
              ['my-ref']: "eventqtreeview",
              rootLable: "Все турниры",
              nodeKey: "tempId",
              labelKey: "NameForTreeView",
              useLazyStategy: true,
              MYSTYLE: { width: "20vw", height: "100vh"}, 
              //childrenKey: "Parent",:style="{height: 100, display: ['inline-block']}"
              ['tree-view-ref']: "treeView",         
              ['data-structure']: "plain",
              ['display-expr']: "Name",
              ['key-expr']: "tempId",
              ['parent-id-expr']: "tempParentId",
              //width: "600",
              height: "100vh",
              ['search-enabled']: true,
              ['item-template']: "default-template",
              ['context-menu-ref']: "contextMenu",
              target: "#treeview .dx-treeview-item",
              ['context-menu-items']: [
                { type: 'Contract', text: 'Свойства проекта', listObjects: [] },
                { type: 'CreateComplect', text: 'Создать комплект', listObjects: ["SprStage", "Contract","Op"] },
                { type: 'SprStage', text: 'Свойства стадии', listObjects: [] },
                { type: 'Op', text: 'Свойства комплесного объекта', listObjects: [] },
                { type: 'Complect', text: 'Свойства комплекта', listObjects: [] },
                { type: 'Printing', text: 'Создать заявку на печать', listObjects: [
                  "Complect", "Op"
                ] },
              ],
              ['settings-denis']: "treeViewPopupContent",
              //['tree-view-create-children']: "treeViewCreateChildren",
              buttonClick: "eventName=on-load-objects",
              autoGetDataSource: true,
              dataSource: null,
              objectType: "{setvalue getterName=getObjectTypes, path=Event}",
              tempId: 0,
              getterDataName: "getBranchTreeView",
              actionName: "loadBranchTree",
              actionParam: null, 
              parents: {parents: {}, idsType: {}},
              selectedTreeData: {},
              selectedObject: null,
              selectedObjectId: null,
              selectedValue: null,
              selectedObjectDataType: null,
              createChildrenFilter: null,
              handlerTreeViewObjectSelected: "{binding componentName=caseTreeView, path=handler}",
              handlerTreeViewObjectSelected2: "{binding componentName=opTreeView, path=handler}",
              handlerTreeViewObjectSelected3: "{binding componentName=globalOpTreeView, path=handler}",
              handlerTreeViewObjectSelected4: "{binding componentName=projectPropertyDataGrid, path=handler}",
              handlerTreeViewObjectSelected5: "{binding componentName=invoicesObjectsDataGrid, path=handler}",
              handlerTreeViewObjectSelected6: "{binding componentName=schedulePlanDropDownDataGrid, path=handler}",
              handlerTreeViewObjectSelected7: "{binding componentName=transferTaskObjectsDataGrid, path=handler}",
              handlerTreeViewObjectSelected8: applib.loadpageProjectContent,
              thisRef: null,
              thisInstance: null,},  ],
          },{
            GROUPNAME: "settingTreeView",
            title: "Настраиваемый вид",
            label: "Настраиваемый вид",
            static: true,
            MYSTYLE: {backgroundColor: "white"}, 
            COMPONENTS: [
              {component: "ButtonDx", 
                          buttonclick: "on-load-objects",
                          text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                          NAME: "mainDGButtonLoad",
                          emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
            ]
}]}//___________________________
//Нижний контент          
var documentContent={
  MYSTYLE: { width: "78vw", height: "30vh",  }, 
  container: "DxTabPanel",
  CONTAINERNAME: "documentContent",
  dataSource: [{
              GROUPNAME: "documentParts",
              title: "{binding componentName=complectContent, path=typeForSubordinateTable.Title}", 
              static: true,
              MYSTYLE: {backgroundColor: "white"}, 
              COMPONENTS: [ 
                    {component: "ObjectsDataGrid", 
                                  NAME: "mainObjectsDataGrid4",
                                buttonClick: "on-load-objects",
                                acceptedType: Object,
                                editingMode: "popup",
                                autoGetDataSource: true,
                                dataSource: null,
                                objectType : "{binding componentName=complectContent, path=typeForSubordinateTable}",
                                getterName: null,
                                requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                                //height: 500,
                                //width: 1500,
                                modifiedObjects: [],
                                selectedCellType: "",
                                selectedCellData:"",
                                getterParam: "",
                                getter: undefined,
                                actionName: null,
                                actionParam: "", 
                                selectedObject: null,
                                selectedObjectDataType: null,
                                selectedValue: null,
                                selectedObjectType: null,
                                selectedCell: null,
                                text: ""},
                  
                              ],
        
          
          },{
            GROUPNAME: "documentView",
            title: "Просмотр документа",
            static: true,
            MYSTYLE: {backgroundColor: "white"},  
            COMPONENTS: [ 
                  
                  {component: "ObjectsDataGrid", 
                                NAME: "mainObjectsDataGrid5",
                              buttonClick: "on-load-objects",
                              acceptedType: Object,
                              autoGetDataSource: true,
                              dataSource: null,
                              objectType : "{binding componentName=mainObjectsDataGrid, path=docPartsObjectType}",
                              getterName: null,
                              requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                              height: "40vh",
                              //width: 1500,
                              selectedCellType: "",
                              selectedCellData:"",
                              modifiedObjects: [],
                              getterParam: "",
                              getter: undefined,
                              actionName: null,
                              actionParam: "", 
                              selectedObject: null,
                              selectedObjectDataType: null,
                              selectedValue: null,
                              selectedObjectType: null,
                              text: ""},
                
                            ],
      
        
        },{
          GROUPNAME: "scanView",
          title: "Просмотр скана документа",
          static: true,
          MYSTYLE: {backgroundColor: "white"},  
          COMPONENTS: [ 
                
                {component: "ObjectsDataGrid", 
                              NAME: "mainObjectsDataGrid6",
                            buttonClick: "on-load-objects",
                            acceptedType: Object,
                            autoGetDataSource: true,
                            dataSource: null,
                            objectType : "{binding componentName=mainObjectsDataGrid, path=docPartsObjectType}",
                            getterName: null,
                            selectedCellType: "",
                            requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                            selectedCellData:"",
                            height: "40vh",
                            //width: 1500,
                            getterParam: "",
                            modifiedObjects: [],
                            getter: undefined,
                            actionName: null,
                            actionParam: "", 
                            selectedObject: null,
                            selectedObjectDataType: null,
                            selectedValue: null,
                            selectedObjectType: null,
                            text: ""},
              
                          ]
    
      
 }]}//_________________________
 //Верхний контент  
 var complectContent={
  ['main-title']: "{binding componentName=mainTreeView, path=selectedObject.Title}",
  MYSTYLE: { width: "78vw", height: "40vh",  }, 
  container: "DxTabPanel",
  selectedtab: 0,
  selectedTab: "Коплект",
  //height: "100%",
  //width: "100%",
  ref: "topContent",
  typeForSubordinateTable: "{setvalue getterName=getObjectTypes, path=DocumentPart}",
  CONTAINERNAME: "complectContent",
  thisInstance: null,
  selectedTabName: "Коплекты",
  ttt: null,
  eventHandlerClick: "{binding componentName=caseTreeView, path=handler}",
  eventHandlerClick2: "{binding componentName=opTreeView, path=handler}",
  eventHandlerClick3: "{binding componentName=globalOpTreeView, path=handler}",
  eventHandlerClick4: "{binding componentName=projectPropertyDataGrid, path=handler}",
  eventHandlerClick5: "{binding componentName=invoicesObjectsDataGrid, path=handler}",
  eventHandlerClick6: "{binding componentName=schedulePlanDropDownDataGrid, path=handler}",
  eventHandlerClick7: "{binding componentName=transferTaskObjectsDataGrid, path=handler}",
  eventHandlerClick8: applib.loadpageProjectContent,
  dataSource: [{ 
        GROUPNAME: "pageProjectContent",
        title: "Коплект", 
        label: "{binding componentName=mainObjectsDataGrid, path=objectTypeName}", 
        static: true,
        MYSTYLE:  {}, 
        COMPONENTS: [ 
          {component: "ButtonDx", 
                                  buttonclick: "on-db-update",
                                  text: "Save", 
                                  NAME: "dDxButton2",
                                  //emitParam1: "{binding componentName=PARENT, path=selectedCell}",
                                  emitParam3: "{binding componentName=mainObjectsDataGrid, path=modifiedObjects}"},                           
                        
              {component: "QObjectsDataGrid", 
                            NAME: "mainObjectsDataGrid",
                          buttonClick: "on-load-objects",
                          acceptedType: Object,
                          autoGetDataSource: true,
                          dataSource: null,
                          objectType: "{binding componentName=mainTreeView, path=objectType}",
                          objectTypeName: "{binding componentName=mainTreeView, path=objectType.Title}", 
                          docPartsObjectType: null,
                          height: "40vh",
                          width: "100%",
                          ['editing-mode']: "popup",
                          requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                          getterName: null,
                          modifiedObjects: [],
                          selectedTabInMyGroup: null,
                          selectedCellType: "",
                          selectedCellData:"",
                          getterParam: "",
                          getter: undefined,
                          actionName: null,
                          actionParam: "", 
                          selectedCell: null,
                          selectedObject: null,
                          selectedObjectDataType: null,
                          selectedValue: "",
                          selectedObjectType: null,
                          thisInstance: null,
                          text: ""},
              
                        ],
      },{
        GROUPNAME: "invoices",
        title: "Накладные",
        label: "Накладные",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "invoicesButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},
          {component: "QObjectsDataGrid", 
                    NAME: "invoicesObjectsDataGrid",
                    buttonClick: "on-load-objects",
                    acceptedType: Object,
                    autoGetDataSource: true,
                    dataSource: null,
                    objectType : "{setvalue getterName=getObjectTypes, path=LetterProtocol}",
                    getterName: null,
                    height: "40vh",
                          width: "100%",
                    modifiedObjects: [],
                    //myTabSelected: false,
                    selectedCellType: "",
                    requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                    selectedCellData:"",
                    getterParam: "",
                    getter: undefined,
                    actionName: null,
                    actionParam: "", 
                    selectedObject: null,
                    selectedObjectDataType: null,
                    selectedValue: null,
                    selectedObjectType: null,
                    text: "",
                    handler: applib.loadLetterProtocolsByContract,
                  },
        ]
      },{
        GROUPNAME: "projectProperty",
        title: "Свойства проекта",
        label: "Свойства проекта",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "projectPropertyButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},
            {component: "QObjectsDataGrid", 
                        NAME: "projectPropertyDataGrid",
                      buttonClick: "on-load-objects",
                      acceptedType: Object,
                      autoGetDataSource: true,
                      dataSource: null,
                      objectType : "{setvalue getterName=getObjectTypes, path=ContractProp}",
                      autoColumns:true,
                      columns: [{dataField: "Value", dataType:"list", IsArray:true,  lookup:{valueExpr: "Title", dataSource:[{Title:"Да"},{Title:"Нет"}]}}],
                      getterName: null,
                      height: "40vh",
                      //width: 1500,
                      modifiedObjects: [],
                      requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                      selectedCellType: "",
                      selectedCellData:"",
                      getterParam: "",
                      getter: undefined,
                      actionName: null,
                      actionParam: "", 
                      selectedObject: null,
                      selectedObjectDataType: null,
                      selectedValue: null,
                      selectedObjectType: null,
                      text: "",
                      handler: applib.loadContractPropsByContract,
                    },  
        ]
      },{
        GROUPNAME: "projectCase",
        title: "Дело проекта",
        label: "Дело проекта",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "projectCaseButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},
            {component: "TreeView", 
                        NAME: "caseTreeView",
                      ['tree-view-ref']: "treeView2",         
                      ['data-structure']: "plain",
                      ['display-expr']: "NameForTreeView",
                      ['key-expr']: "tempId",
                      ['parent-id-expr']: "tempParentId",
                      //width: "600",
                      height: "40vh",
                      ['search-enabled']: true,
                      ['offline-mode-denis']: true,
                      ['component-name-denis']: "mainTreeView",
                      ['item-template']: "default-template",
                      ['context-menu-ref']: "contextMenu2",
                      target: "#treeview2 .dx-treeview-item",
                      ['context-menu-items']: [
                        { type: 'Contract', text: 'Свойства проекта', listObjects: [] },
                        { type: 'CreateComplect', text: 'Создать комплект', listObjects: ["SprStage", "Contract","Op"] },
                        { type: 'SprStage', text: 'Свойства стадии', listObjects: [] },
                        { type: 'Op', text: 'Свойства комплесного объекта', listObjects: [] },
                        { type: 'Complect', text: 'Свойства комплекта', listObjects: [] },
                        { type: 'Printing', text: 'Создать заявку на печать', listObjects: [
                          "Complect", "Op"
                        ] },
                      ],
                      ['settings-denis']: "treeViewPopupContent",
                      
                      buttonClick: "eventName=on-load-objects",
                      acceptedType: Object,
                      delegat: null,
                      autoGetDataSource: true,
                      dataSource: null,
                      objectType: null,
                      tempId: 0,
                      getterDataName: "getTreeObjectsBranch",
                      getterDataParam: null,
                      getterData: null,
                      getterObjectType: null,
                      getterDataType: null,
                      actionName: "loadTreeObjectsBranch",
                      actionParam: null, 
                      parents: {parents: {}, idsType: {}},
                      selectedTreeData: {},
                      selectedObject: null,
                      selectedObjectId: null,
                      selectedValue: null,
                      selectedObjectType: null,
                      selectedObjectDataType: null,
                      selectedObjectDataTypeName: null,
                      createChildrenFilter: "{binding componentName=mainTreeView, path=selectedTreeData.Contract}",
                      text: "",
                      thisInstance: null,
                      handler: applib.updateCaseTreeViewItems,
                    }
        ]
      },{
        GROUPNAME: "schedulePlan",
        title: "План-график",
        label: "План-график",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "schedulePlanButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"}, 
          {component: "DropDownDataGrid", 
                        NAME: "schedulePlanDropDownDataGrid",
                      buttonClick: "on-load-objects",
                      acceptedType: Object,
                      editingMode: "popup",
                      autoGetDataSource: true,
                      dataSource: null,
                      objectType : "{setvalue getterName=getObjectTypes, path=PshPlan}",
                      getterName: null,
                      height: "40vh",
                      //width: 1500,
                      modifiedObjects: [],
                      selectionMode:  "single",
                      selectedCellType: "",
                      selectedCellData:"",
                      getterParam: "",
                      getter: undefined,
                      actionName: null,
                      actionParam: "", 
                      selectedObject: null,
                      selectedObjectDataType: null,
                      selectedValue: null,
                      selectedObjectType: null,
                      text: "",
                      handler: applib.loadPshPlansByContract,
                    },
            {component: "TreeListDx",
                      NAME: "TreeListSheduller",
                      dataSource: null,
                      objectType: "{setvalue getterName=getObjectTypes, path=Sheduller}",
                      showBorders: true,
                      columnAutoWidth: true,
                      wordWrapEnabled: true,
                      expandedRowKeys: [],
                      selectedRowKeys: [],
                      keyExpr: "Id",
                      parentIdExpr: "ParentId",
                      autoGetDataSource: true }
                       
        ]
      },{
        GROUPNAME: "transferTasks",
        title: "Передача заданий",
        label: "Передача заданий",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "LableDx",
                    NAME: "filterGroupCheckBox",
                    text: "Cкрыть: ",
                    MYSTYLE: {display: "inline-block", float: "left", ['margin-right']: "20px"},
                    resultFilter: function(n) {
                      let rejectedCheck = this.getGraph.findVertexByValue("rejectedCheck")
                      let completedCheck = this.getGraph.findVertexByValue("completedCheck")
                      let cancelledCheck = this.getGraph.findVertexByValue("cancelledCheck")
                      if (rejectedCheck && completedCheck && cancelledCheck){
                        let rejectedFilter  = this.getGraph.getNodeValue(rejectedCheck.name,"result")
                        let completedFilter  = this.getGraph.getNodeValue(completedCheck.name,"result")
                        let cancelledFilter  = this.getGraph.getNodeValue(cancelledCheck.name,"result")
                        return rejectedFilter(n)&&completedFilter(n)&&cancelledFilter(n)
                      }
                      else
                        return true}

          },
          {component: "CheckBox",
                    NAME: "rejectedCheck",
                    text: "Отклоненные",
                    hint: "Отклоненные",
                    ['icon-size']: "20",
                    value: true,
                    checked: function(n) { return n.Status != "отклонено"},
                    unchecked: function() { return true},
                    result: function(n){ return n.Status != "отклонено"},
                    MYSTYLE: {display: "inline-block", float: "left",['margin-right']: "20px"}
          },{component: "CheckBox",
                    NAME: "completedCheck",
                    text: "Выполненные",
                    hint: "Выполненные",
                    ['icon-size']: "20",
                    value: true,
                    checked: function(n) { return n.Status != "выполнено"},
                    unchecked: function() { return true},
                    result: function(n){ return n.Status != "выполнено"},
                    MYSTYLE: {display: "inline-block", float: "left",['margin-right']: "20px"}
          },{component: "CheckBox",
                    NAME: "cancelledCheck",
                    text: "Аннулированные",
                    hint: "Аннулированные",
                    ['icon-size']: "20",
                    value: true,
                    checked: function(n) { return n.Status != "аннулировано"},
                    unchecked: function() { return true},
                    result: function(n){ return n.Status != "аннулировано"},
                    MYSTYLE: {display: "inline-block"}
          },{component: "QDynamicComponent", 
                      //tabs: null,
                      NAME: "transferTasksDynamicComponentn",
                      ['is-dynamic']: false,
                      MYSTYLE: {backgroundColor: "white",}, 
                      },  
        ]
      },{
        GROUPNAME: "typicalSolutions",
        title: "Типовые решения",
        label: "Типовые решения",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "typicalSolutionsButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
        ]
      },{
        GROUPNAME: "genplan",
        title: "Генпланы и трассы",
        label: "Генпланы и трассы",
        MYSTYLE: {backgroundColor: 'white'}, 
        static: true,
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "genplanButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}",
                      MYSTYLE: {backgroundColor: "red", display: "inline-block", float: "left"}, }, 
                      
          {component: "TreeView", 
                        NAME: "opTreeView",
                        MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                      ['tree-view-ref']: "treeViewOp",         
                      ['data-structure']: "plain",
                      ['display-expr']: "NameForTreeView",
                      ['key-expr']: "tempId",
                      ['parent-id-expr']: "tempParentId",
                      //width: "600",
                      height: "40vh",
                      ['search-enabled']: true,
                      ['offline-mode-denis']: true,
                      ['component-name-denis']: "mainTreeView",
                      ['item-template']: "default-template",
                      ['context-menu-ref']: "contextMenuOp",
                      target: "#treeviewOp .dx-treeview-item",
                      ['context-menu-items']: [
                        { type: 'Contract', text: 'Свойства проекта', listObjects: [] },
                        { type: 'CreateComplect', text: 'Создать комплект', listObjects: ["SprStage", "Contract","Op"] },
                        { type: 'SprStage', text: 'Свойства стадии', listObjects: [] },
                        { type: 'Op', text: 'Свойства комплесного объекта', listObjects: [] },
                        { type: 'Complect', text: 'Свойства комплекта', listObjects: [] },
                        { type: 'Printing', text: 'Создать заявку на печать', listObjects: [
                          "Complect", "Op"
                        ] },
                      ],
                      ['settings-denis']: "treeViewPopupContent",
                      
                      buttonClick: "eventName=on-load-objects",
                      acceptedType: Object,
                      delegat: null,
                      autoGetDataSource: true,
                      dataSource: null,
                      objectType: null,
                      tempId: 0,
                      getterDataName: "getOpsBranch",
                      getterDataParam: null,
                      getterData: null,
                      getterObjectType: null,
                      getterDataType: null,
                      actionName: "loadOpsBranch",
                      actionParam: null, 
                      parents: {parents: {}, idsType: {}},
                      selectedTreeData: {},
                      selectedObject: null,
                      selectedObjectId: null,
                      selectedValue: null,
                      selectedObjectType: null,
                      selectedObjectDataType: null,
                      selectedObjectDataTypeName: null,
                      createChildrenFilter: "{binding componentName=mainTreeView, path=selectedTreeData.Contract}",
                      text: "",
                      thisInstance: null,
                      handler: applib.updateOpTreeViewItems,
                    } ,
                      {component: "TreeView", 
                      MYSTYLE: {backgroundColor: "white", display: "inline-block", float: "left"},
                      NAME: "globalOpTreeView",
                    ['tree-view-ref']: "treeViewGlobalOp",         
                    ['data-structure']: "plain",
                    ['display-expr']: "NameForTreeView",
                    ['key-expr']: "tempId",
                    ['parent-id-expr']: "tempParentId",
                    //width: "600",
                    height: "40vh",
                    ['search-enabled']: true,
                    ['offline-mode-denis']: true,
                    ['component-name-denis']: "mainTreeView",
                    ['item-template']: "default-template",
                    ['context-menu-ref']: "contextMenuOp",
                    target: "#treeviewGlobalOp .dx-treeview-item",
                    ['context-menu-items']: [
                      { type: 'Contract', text: 'Свойства проекта', listObjects: [] },
                      { type: 'CreateComplect', text: 'Создать комплект', listObjects: ["SprStage", "Contract","Op"] },
                      { type: 'SprStage', text: 'Свойства стадии', listObjects: [] },
                      { type: 'Op', text: 'Свойства комплесного объекта', listObjects: [] },
                      { type: 'Complect', text: 'Свойства комплекта', listObjects: [] },
                      { type: 'Printing', text: 'Создать заявку на печать', listObjects: [
                        "Complect", "Op"
                      ] },
                    ],
                    ['settings-denis']: "treeViewPopupContent",
                    
                    buttonClick: "eventName=on-load-objects",
                    acceptedType: Object,
                    delegat: null,
                    autoGetDataSource: true,
                    dataSource: null,
                    objectType: null,
                    tempId: 0,
                    getterDataName: "getGlobalOpsBranch",
                    getterDataParam: null,
                    getterData: null,
                    getterObjectType: null,
                    getterDataType: null,
                    actionName: "loadGlobalOpsBranch",
                    actionParam: null, 
                    parents: {parents: {}, idsType: {}},
                    selectedTreeData: {},
                    selectedObject: null,
                    selectedObjectId: null,
                    selectedValue: null,
                    selectedObjectType: null,
                    selectedObjectDataType: null,
                    selectedObjectDataTypeName: null,
                    createChildrenFilter: "{binding componentName=mainTreeView, path=selectedTreeData.Contract}",
                    text: "",
                    thisInstance: null,
                    handler: applib.updateGlobalOpTreeViewItems,

                  } 
                
        ]
      },{
        GROUPNAME: "registerComments",
        title: "Реестр замечаний",
        label: "Реестр замечаний",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "registerCommentsButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
                      
        ]
      },{
        GROUPNAME: "scopeWork",
        title: "Объемы работ на ПИР",
        label: "Объемы работ на ПИР",
        static: true,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [
          {component: "ButtonDx", 
                      buttonclick: "on-load-objects",
                      text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                      NAME: "scopeWorkButton",
                      emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
        ]
}]}
      
var createComplect={
  container: "DxTabPanel",
  CONTAINERNAME: "createComplect",
  dataSource: [{ 
        GROUPNAME: "treeViewCreateComplect",
        title: "Свойства комплекта",
        label: "Свойства комплекта",
        static: false,
        COMPONENTS: [                
          {component: "ObjectForm", 
                      NAME: "ComplectProperty",
                      acceptedType: Object,
                      autoGetDataSource: false,
                      dataSource: "{binding componentName=mainTreeView, path=selectedTreeData}", 
                      objectType: "{setvalue getterName=getObjectTypes, path=Complect}",
                      getterName: null,
                      getterParam: "",
                      getter: undefined,
                      actionName: null,
                      actionParam: "", 
                      selectedObject: "",
                      selectedValue: null,
                      selectedObjectType: null,
                      text: ""},
                        ]
}]}
var transferTask={
  container: "DxTabPanel",
  CONTAINERNAME: "transferTaskModule",
  MYSTYLE: { width: "78vw", height: "40vh",  }, 
  selectedtab: 0,
  //height: "100%",
  //width: "100%",
  ref: "tttContent",
  thisInstance: null,
  selectedTabName: null,
  ttt: null,
  eventHandlerClick: null,
  eventHandlerClick2: null,
  eventHandlerClick3: null,
  checkBoxEventHandler: null,
  dataSource: [{ 
        GROUPNAME: "tasks",
        title: "Задания",
        label: "Задания",
        static: false,
        MYSTYLE: {backgroundColor: "white"}, 
        COMPONENTS: [                
          {component: "ObjectsDataGrid", 
                        NAME: "transferTaskObjectsDataGrid",
                        buttonClick: "on-load-objects",
                        MYSTYLE: {backgroundColor: "white"}, 
                        ['data-filter']: "{binding componentName=filterGroupCheckBox, path=resultFilter}", 
                        autoGetDataSource: true,
                        dataSource: null,
                        objectType : "{setvalue getterName=getObjectTypes, path=TransferTaskView}",
                        getterName: null,
                        height: "35vh",
                        //width: 1500,
                        ['editing-mode']: "popup",
                        requestOptions: "{binding componentName=laborCostContent, path=requestOptions1}",
                        modifiedObjects: [],
                        //myTabSelected: false,
                        selectedCellType: "",
                        selectedCellData:"",
                        getterParam: "",
                        getter: undefined,
                        actionName: null,
                        actionParam: "", 
                        selectedObject: null,
                        selectedObjectDataType: null,
                        selectedValue: null,
                        selectedObjectType: null,
                        text: "",
                        handler: applib.loadTransferTaskViewsByContract,
                      },

                        ]
        },{
          GROUPNAME: "WorkReport",
          title: "Отчет по работам",
          label: "Отчет по работам",
          static: true,
          MYSTYLE: {backgroundColor: "white", display: ['inline-block']}, 
          COMPONENTS: [
            {component: "QTreeView", 
                      NAME: "TestQTreeView",
                      myRef: "contractQTreeView",
                      rootLable: "Все проекты",
                      nodeKey: "tempId",
                      labelKey: "NameForTreeView",
                      useLazyStategy: true,
                      //childrenKey: "Parent",:style="{height: 100, display: ['inline-block']}"
                      ['tree-view-ref']: "treeView",         
                      ['data-structure']: "plain",
                      ['display-expr']: "Name",
                      ['key-expr']: "tempId",
                      ['parent-id-expr']: "tempParentId",
                      //width: "600",
                      height: "100vh",
                      ['search-enabled']: true,
                      ['offline-mode-denis']: true,
                      ['component-name-denis']: "mainTreeView",
                      ['item-template']: "default-template",
                      ['context-menu-ref']: "contextMenu",
                      target: "#treeview .dx-treeview-item",
                      ['context-menu-items']: [
                        { type: 'Contract', text: 'Свойства проекта', listObjects: [] },
                        { type: 'CreateComplect', text: 'Создать комплект', listObjects: ["SprStage", "Contract","Op"] },
                        { type: 'SprStage', text: 'Свойства стадии', listObjects: [] },
                        { type: 'Op', text: 'Свойства комплесного объекта', listObjects: [] },
                        { type: 'Complect', text: 'Свойства комплекта', listObjects: [] },
                        { type: 'Printing', text: 'Создать заявку на печать', listObjects: [
                          "Complect", "Op"
                        ] },
                      ],
                      ['settings-denis']: "treeViewPopupContent",
                      //['tree-view-create-children']: "treeViewCreateChildren",
                      buttonClick: "eventName=on-load-objects",
                      
                      delegat: null,
                      autoGetDataSource: true,
                      dataSource: null,
                      objectType: null,
                      tempId: 0,
                      getterDataName: "getBranchTreeView",
                      getterDataParam: null,
                      getterData: null,
                      getterObjectType: null,
                      getterDataType: null,
                      actionName: "loadBranchTree",
                      actionParam: null, 
                      parents: {parents: {}, idsType: {}},
                      selectedTreeData: {},
                      selectedObject: null,
                      selectedObjectId: null,
                      selectedValue: null,
                      selectedObjectType: null,
                      selectedObjectDataType: null,
                      selectedObjectDataTypeName: null,
                      createChildrenFilter: null,
                      eventHandlerClick: "{binding componentName=caseTreeView, path=handler}",
                      eventHandlerClick2: "{binding componentName=opTreeView, path=handler}",
                      eventHandlerClick3: "{binding componentName=globalOpTreeView, path=handler}",
                      eventHandlerClick4: "{binding componentName=projectPropertyDataGrid, path=handler}",
                      eventHandlerClick5: "{binding componentName=invoicesObjectsDataGrid, path=handler}",
                      eventHandlerClick6: "{binding componentName=schedulePlanDropDownDataGrid, path=handler}",
                      eventHandlerClick7: "{binding componentName=transferTaskObjectsDataGrid, path=handler}",
                      thisRef: null,
                      thisInstance: null,},  
                        
          ]
        },{
          GROUPNAME: "planningScreen",
          title: "Экран планирования",
          label: "Экран планирования",
          static: true,
          MYSTYLE: {backgroundColor: "white"}, 
          COMPONENTS: [
            {component: "ButtonDx", 
                        buttonclick: "on-load-objects",
                        text: "{binding componentName=mainObjectsDataGrid3, path=objectType.Name}", 
                        NAME: "registerCommentsButton",
                        emitParam1: "{binding componentName=mainObjectsDataGrid3, path=objectType}"},  
                        
          ]
        },
]}

export default {
  applib2,
    getComponentSettings() {
      //this.setValue(complectContent)
      //this.setValue(documentContent)
      return {treeViewPopupContent: treeViewPopupContent, treeViewContent:treeViewContent, documentContent:documentContent, 
        complectContent:complectContent, createComplect:createComplect, transferTask:transferTask, laborCostContent:laborCostContent,
        participations:participations, events:events, bowlings:bowlings,navigation1:navigation1,
        oils:oils, teams:teams,teamMembers:teamMembers,players:players, cities:cities, ranks:ranks, uploads:uploads};
    },
    getdataGridPopupContent() {
      //делаем копию стуктуры
        const container = {...dataGridPopupContent}
        const dataSource = dataGridPopupContent.dataSource.map(a => {
                                                              let components = {COMPONENTS:a.COMPONENTS.map(c => Object.assign({}, c))};
                                                               return Object.assign({}, a, components)});
        container.dataSource = dataSource
        return {dataGridPopupContent: container};
    },
    //calculateExpressions(settings){
      
    //},
    replaceText(container, text, value) {
      if (Array.isArray(container)) {
        for (let index = 0; index < container.length; ++index) {
          if(typeof(container[index])=="string"){
            container[index] = container[index].replace(text, value)
          }else{
            this.replaceText(container[index], text, value)
          }
        }
      } else if(typeof(container)=="object" && container !==null) {
        for(let key of Object.keys(container)){
          if(typeof(container[key])=="string"){
            container[key] = container[key].replace(text, value)
          }else{
            this.replaceText(container[key], text, value)
          }
        }
      } 
    },

    setValue(container) {
      if (Array.isArray(container)) {
        for (let index = 0; index < container.length; ++index) {
          if(typeof(container[index])=="string"){
            this.setPropertyValue(container, index)
          }else{
            this.setValue(container[index])
          }
        }
      } else if(typeof(container)=="object" && container !==null) {
        for(let key of Object.keys(container)){
          if(typeof(container[key])=="string"){
            this.setPropertyValue(container, key)
          }else{
            this.setValue(container[key])
          }
        }
      } 
    },

    
    setPropertyValue(component, key){
      let binding=component[key].match(/^\{\s*\bsetvalue\b\s+\bgetterName\b\s*=\s*(\w+)\s*,\s*\bpath\b\s*=\s*([A-Za-z0-9.]+)\s*\}$/i) || []
      if(binding.length==3){
        const getterName = binding[1]
        let path = binding[2]

        let getter = store.getters[getterName]
        if(getter !== undefined) {
          component[key] = getter.find(o => o.Name == path)
          
        }
        else{
          component[key] = null
        }
        // if(component[key] == null){
        //   const getterName = "getAnyObjects"
        //   getter = store.getters[getterName]
        //   console.log("++++++++++getter[path]++++++++++", getter[path])
        //   if(getter !== undefined){
        //     component[key] = getter[path]
        //   }
        // }
      }
    }

};